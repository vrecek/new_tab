// # # # # # # # # # # # # # # # # # # COMMENTS # # # # # # # # # # # # # # # # # # # # #

/*
   Media queries: 1200px | 1000px | 768px | 480px
*/

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #



// # # # # # # # # # # # # # # # # # # # COLORS # # # # # # # # # # # # # # # # # # # # #

$clr-blacklr: rgb(85, 85, 85);
$clr-blackl: rgb(60, 60, 60);
$clr-blackd: rgb(45, 45, 45);
$clr-blackdr: rgb(30, 30, 30);

$clr-whitelr: rgb(250, 250, 250);
$clr-whitel: rgb(240, 240, 240);
$clr-whited: rgb(225, 225, 225); 
$clr-whitedr: rgb(210, 210, 210); 

$clr-greylr: rgb(195, 195, 195);
$clr-greyl: rgb(180, 180, 180);
$clr-greyd: rgb(150, 150, 150);
$clr-greydr: rgb(110, 110, 110);

$clr-greenlr: rgb(16, 233, 77);
$clr-greenl: rgb(26, 203, 37);
$clr-greend: rgb(22, 174, 73);

$clr-bluelr:rgb(160, 214, 255);
$clr-bluel: rgb(109, 160, 255);
$clr-blued: rgb(49, 85, 190);
$clr-bluedr:rgb(45, 70, 143);

$clr-purplelr: rgb(146, 54, 193);
$clr-purplel: rgb(119, 44, 157);
$clr-purpled: rgb(100, 38, 131);
$clr-purpledr: rgb(79, 27, 105);

$clr-redlr: rgb(234, 18, 18);
$clr-redl: rgb(199, 11, 11);
$clr-redd: rgb(164, 19, 19);
$clr-reddr: rgb(131, 15, 15);

$clr-orangel: rgb(255, 136, 0);
$clr-oranged: rgb(230, 72, 15);

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #



// # # # # # # # # # # # # # # # # # MIXINS # # # # # # # # # # # # # # # # # # # # # # # 

// Darkens the element on hover
@mixin HoverBG($transition: 250ms, $bg: auto, $color: auto) {
   transition: $transition;
   cursor: pointer;
   
   &:hover {
      @if $bg != auto or $color != auto {
         color: $color;
         background: $bg;
      }
      @else {
         filter: brightness(85%);
      }
   }
}

// Sets both width and height to $size
@mixin Rectangle($size: 100%, $disp: block) {
   width: $size;
   height: $size;
   display: $disp;
}

// Sets the minimum, current, and maximum width of a container
@mixin SetWidth($minPX, $curr, $max) {
   width: $curr;
   min-width: #{$minPX}px;
   max-width: #{$max};
}

// Resets the min/max width properties
@mixin ResetWidth {
   min-width: auto;
   max-width: none;
}

// Sets the z-index
@mixin Layer($zIndex: 2, $pos: relative) {
   position: $pos;
   z-index: $zIndex;
}

// Makes the responsive font size easier to use
@mixin Clamp($min, $vw, $max) {
   font-size: clamp(#{$min}rem, #{$vw}vw, #{$max}rem);
}

// Makes the flex properties easier to use
@mixin Flex($justify: none, $align: none, $dir: none) {
   display: flex;
   justify-content: FlexFunc($justify);
   align-items: FlexFunc($align);
   flex-direction: FlexDirFunc($dir);
}

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #



// # # # # # # # # # # # # # # # HELPER FUNCTIONS # # # # # # # # # # # # # # # # # # # # #

@function FlexFunc($val) {
   $finalVal: none;

   @if $val == sb { $finalVal: space-between; }
   @else if $val == c { $finalVal: center }
   @else if $val == sa { $finalVal: space-around; }
   @else if $val == fe { $finalVal: flex-end; }
   @else if $val == fs { $finalVal: flex-start; }
   @else if $val == st { $finalVal: stretch; }

   @return $finalVal;
}
@function FlexDirFunc($val) {
   $finalVal: row;

   @if $val == c { $finalVal: column; }
   @else if $val == cr { $finalVal: column-reverse }
   @else if $val == rr { $finalVal: row-reverse; }
   
   @return $finalVal;
}

// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #



// # # # # # # # # # # # # # # # LOCAL PROJECT VARIABLES # # # # # # # # # # # # # # # # #



// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #



// # # # # # # # # # # # # # # # # LOCAL PROJECT MIXINS # # # # # # # # # # # # # # # # # #



// # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #